import psutil
import subprocess
import os
import argparse
from subprocess import PIPE


def getProcessNames(filename):
    try:
        num_lines = sum(1 for line in open(filename))
        with open(filename,'r') as file:
            content=file.read()
    except IOError:
        exit("Could not readl file: "+str(filename))
    processNames=content.split('\n')
    return processNames
    
def getPID(processName):
    command="systemctl status "+processName
    command+=" |grep PID:"
    try:
        output=subprocess.check_output([command], shell=True, stderr=PIPE)
    except subprocess.CalledProcessError:
        try:
            command="systemctl --all --type service"
            command+=" |grep "
            command+=processName
            output=subprocess.check_output([command], shell=True, stderr=PIPE)
        except subprocess.CalledProcessError:
            print("No such process Exists: "+str(processName))
            return False;
        if "inactive" in output:
            if "not-found" in output:
                print("Process "+str(processName)+" is inactive and CAN'T BE FOUND")
                return False;
            print("Process "+str(processName)+" is inactive but loaded")
            return False;
        else:
            print("No such process Exists: "+str(processName))
            return False;
    output=output.split(" ")
    return output[3]

def getStatus(processName):
    ##ne e nujen try i except za CalledProcessError?
    command="systemctl status "+processName
    command+=" |grep Active:"
    output=subprocess.check_output([command], shell=True, stderr=PIPE)
    output=output.split("Active:")
    return output[1]

def getPSUTILinfo(PID):
    try:
        p=psutil.Process(PID)
        print("INFORMATION FROM PSUTIL")
        print("Status:"+str(p.status()))
        print("%CPU(1s interval): "+str(p.cpu_percent(interval=1.0)))
        print("CPU times: "+str(p.cpu_times()))
        print("%memory used: "+str(p.memory_percent()))
        print("Command line that called process: "+str(p.cmdline()))
        #NEEDS ROOT
        print("memory fullinfo: "+str(p.memory_full_info()))
        print("IO: "+str(p.io_counters()))
        #NEEDS ROOT ^
        print("Amount of threads: "+str(p.num_threads()))
        print("")
    except psutil.AccessDenied:
        print("Need root access(psutl) for process PID:"+str(PID))

def getTOPinfo(PID):
    command="top -p"+PID+" -b -n 1 | tail -n1"
    output=subprocess.check_output([command], shell=True, stderr=PIPE)
    output=output.split("  ")
    print("\nINFORMATION FROM TOP")
    print("%CPU: "+str(output[9]))
    print("%MEM: "+str(output[10]))
    print("CPU time used: "+str(output[11]))
    print("")

def amountOfChildProcesses(PID):
    command="systemctl status "+processName
    command+=" |grep Tasks:"
    output=subprocess.check_output([command], shell=True, stderr=PIPE)
    output=output.split(" ")
    return output[5]
##----------------START-----------------
    
##get arguments(file name)    
parser=argparse.ArgumentParser(description='Get information about systemd processes')
parser.add_argument('filename')
args=parser.parse_args()
##read the file and get the processNames
processNames=getProcessNames(args.filename)
processNumber=0

while processNumber<len(processNames)-1:
    PID=False
    while(PID==False):
        print("-----------------------------------------------------")
        processName=str(processNames[processNumber])
        if(processName==""):
            exit("No more processes")
        print("Process name: "+processName)
        PID=getPID(processName)
        if(PID==False):
            processNumber+=1
    
    print("PID: "+str(PID))
    status=getStatus(processName)
    print("Status(systemctl): "+status)
    if "running" in status:
        getPSUTILinfo(int(PID))
        getTOPinfo(PID)    
        print("Tasks(from systemctl): "+str(amountOfChildProcesses(int(PID))))

    processNumber+=1
